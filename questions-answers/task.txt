Техническое задание к Web-приложению Runes

1. Общие требования.
1.1 Приложение должно быть выполнено в Web формате (серверная часть - php, лицевая - html + css + js)
1.2 Проект сохранить в Git репозиторий.
1.3 Проект должен иметь архитектуру MVC (Model - View - Control), желательно использовать уже готовый минифреймворк (miniMVC).
1.4 Проект должен иметь стандарт написания кода PHP: PSR-0 или PSR-4 (Желательно 0).

2. Требования к базе.
2.1 База данных должна быть нормализована минимум по 3м нормальным формам.
2.2 Базу необходимо запушить как dump на git репозиторий.
2.3 В базе не должно быть лишних таблиц, или таблиц не имеющих отношения к проекту.

3. Требования к ПО.
3.1 Программа должна полностью выполнять все возложенные требования.
3.2 Программа не должна завершать свою работу критическими ошибками.
3.3 Программа должная в случае ошибки составить отчет об ошибке и сохранить его, чтобы админ мог залезить посмотреть, а программист починить.
3.4 Программа должна быть стрессоустойчива и максимально оптимизирована.
3.5 Все запросы должны выполняться без перезагрузки страницы (AJAX).
3.6 Программа должна быть устойчива к SQL иньекциям.

4. Задача.
4.1 Пользователю предоставляются на выбор все доступные руны из игры Diablo 2. Необходимо сделать изображение каждой руны для наглядности.
4.2 Пользователь может сразу нажать на кнопку "Найти" и отобразить все доступные руны в игре.
4.3 При выборе нескольких рун, пользователь может отметить, показать ему рунные слова, которые влючают в себя эти руны или полностью состоят из них.
Пример: Выбираем руны Ral, Ort, Tal. Без включения функции "Состят из", покажутся все рунные слова, в которых есть эти руны ("Ort - Tir" и пр.)
Если стоит галочка "Состоят из", то программа покажет только слова, которые состоят исключителньо из выбранных рун ("Ral - Ort - Tal" - рунное слово, на сопративление стихиям)
4.4 Так же должно быть меню, где можно указать, на сколько сокетов (прорезей, отверстий, дырок), расчитано это рунное слово (от 2 до 6).
Пример: Пользователь выбрал две позиции - рунные слова на 3 дырки и на 4 дырки, ему должны отобразиться рунные слова подходящие этим характеристикам.
4.5 Та кже должно быть меню, где пользователь должен выбрать класс персонажа, и ему будут показывать только рунные слова, которые прибаляют характеристики для выбранных классов.
Пример: Пользователь выбрал Ассасина и Друида, и ему должны показаться все рунные слова, которые прибавляют характеристики этим классам.
4.6 Все доступные выборки должны работать вместе.
Пример: Пользователь выбрал El, Tir, Eld, Ral, Sol руны, 3, 4, 5 сокетов и класс Варвара. Ему должны отобразиться все подходящие рунные слова под эти описания.
4.7 Результаты выборки должны отображаться в удобной для пользователя таблице.
4.8 Каждое рунное слово должно иметь описание к самому слову, предметы на которые они используются, и характеристики, которые они дают.

5. Интерфейс.
5.1 Интерфейс приложения должен быть понятным, простым и интуиитивным.
5.2 Все настройки должны вмещаться в экран (выдача результатов уже может скролится).
5.3 Интерфейс должен быть адаптивным, в том числе и под мобильное устройство.
5.4 Если есть дополнительно время - оформить в стилистике игры.
